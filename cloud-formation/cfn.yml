---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "ophanBattle-app"
  Parameters:
    VpcId:
      Type: "String"
      Description: "VpcId of your existing Virtual Private Cloud (VPC)"
      Default: "vpc-e6e00183"
    Subnets:
      Type: "CommaDelimitedList"
      Description: "The list of SubnetIds in your Virtual Private Cloud (VPC)"
      Default: "subnet-cb91ae8d, subnet-a7b74ac2, subnet-179e8063"
    Stack:
      Description: "Applied directly as a tag ('membership', or 'memb-masterclasses')"
      Type: "String"
    KeyName:
      Description: "The EC2 Key Pair to allow SSH access to the instance"
      Type: "String"
      Default: "aws-membership"
    Stage:
      Description: "Applied directly as a tag"
      Type: "String"
      Default: "PROD"
    AllowedIngressIps:
      Description: "IP address range (CIDR) that access the site (e.g. '77.91.248.0/21'- Internal Guardian, or '0.0.0.0/0' - the whole internet!)"
      Type: "String"
      Default: "0.0.0.0/0"
    InstanceType:
      Description: "EC2 instance type"
      Type: "String"
      AllowedValues:
        - "t2.micro"
        - "t2.medium"
        - "m3.medium"
      ConstraintDescription: "must be a valid EC2 instance type."
    ImageId:
      Description: "AMI ID"
      Type: "String"
  Resources:
    FrontendAutoScalingGroup:
      Type: "AWS::AutoScaling::AutoScalingGroup"
      Properties:
        AvailabilityZones:
          Fn::GetAZs: ""
        VPCZoneIdentifier:
          Ref: "Subnets"
        LaunchConfigurationName:
          Ref: "FrontendLaunchConfig"
        MinSize:
          1
        MaxSize:
          2
        LoadBalancerNames:
          -
            Ref: "OphanBattleFrontendElasticLoadBalancer"
        HealthCheckType: "ELB"
        HealthCheckGracePeriod: 300
        Tags:
          -
            Key: "Stack"
            Value:
              Ref: "Stack"
            PropagateAtLaunch: "true"
          -
            Key: "App"
            Value: "ophanBattle-frontend"
            PropagateAtLaunch: "true"
          -
            Key: "Stage"
            Value:
              Ref: "Stage"
            PropagateAtLaunch: "true"
    FrontendLaunchConfig:
      Type: "AWS::AutoScaling::LaunchConfiguration"
      Properties:
        ImageId:
          Ref: "ImageId"
        SecurityGroups:
          -
            Ref: "InstanceSecurityGroup"
        InstanceType:
          Ref: "InstanceType"
        KeyName:
          Ref: "KeyName"
        IamInstanceProfile:
          Ref: "OphanBattleAppInstanceProfile"
        AssociatePublicIpAddress: true
        UserData:
          Fn::Base64:
            Fn::Join:
              - "\n"
              -
                - "#!/bin/bash -ev"
                -
                  Fn::Join:
                    - ""
                    -
                      - "aws --region "
                      -
                        Ref: "AWS::Region"
                      - " s3 cp s3://membership-dist/membership/"
                      -
                        Ref: "Stage"
                      - "/ophanBattle-frontend/ophanBattle-frontend_1.0-SNAPSHOT_all.deb /tmp"

                - "dpkg -i /tmp/ophanBattle-frontend_1.0-SNAPSHOT_all.deb"


    OphanBattleAppRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: "/"
        AssumeRolePolicyDocument:
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "PrivateBucket"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "s3:GetObject"
                  Resource: "arn:aws:s3:::github-team-keys/*"
                -
                  Effect: "Allow"
                  Action: "s3:ListBucket"
                  Resource: "arn:aws:s3:::github-team-keys"
          -
            PolicyName: "UpdateSSHKeys"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: s3:GetObject
                  Resource: arn:aws:s3:::github-public-keys/Membership-and-Subscriptions/*
    OphanBattleAppInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Path: "/"
        Roles:
          -
            Ref: "OphanBattleAppRole"
    OphanBattleFrontendElasticLoadBalancer:
      Type: "AWS::ElasticLoadBalancing::LoadBalancer"
      Properties:
        Listeners:
          -
            LoadBalancerPort: "80"
            InstancePort: 9000
            Protocol: "HTTP"
            PolicyNames:
              - "CookieBasedPolicy"
        SecurityGroups:
          -
            Ref: "LoadBalancerSecurityGroup"
        Subnets:
          Ref: "Subnets"
        HealthCheck:
          Target: "HTTP:9000/healthcheck"
          HealthyThreshold: "2"
          UnhealthyThreshold: "2"
          Interval: "10"
          Timeout: "5"
        ConnectionDrainingPolicy:
          Enabled: "true"
          Timeout: "60"
        LBCookieStickinessPolicy:
          -
            CookieExpirationPeriod: "1800"
            PolicyName: "CookieBasedPolicy"
    LoadBalancerSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Permit incoming HTTP access on port 80, egress to port 9000"
        VpcId:
          Ref: "VpcId"
        SecurityGroupIngress:
          -
            IpProtocol: "tcp"
            FromPort: "80"
            ToPort: "80"
            CidrIp:
              Ref: "AllowedIngressIps"
          -
            IpProtocol: "tcp"
            FromPort: "443"
            ToPort: "443"
            CidrIp:
              Ref: "AllowedIngressIps"
          -
            IpProtocol: "tcp"
            FromPort: "80"
            ToPort: "80"
            CidrIp: "80.254.158.92/32"
          -
            IpProtocol: "tcp"
            FromPort: "80"
            ToPort: "80"
            CidrIp: "80.254.146.68/32"
        SecurityGroupEgress:
          -
            IpProtocol: "tcp"
            FromPort: "9000"
            ToPort: "9000"
            CidrIp: "0.0.0.0/0"
    InstanceSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Open up SSH access and enable HTTP access on the configured port"
        VpcId:
          Ref: "VpcId"
        SecurityGroupIngress:
          -
            IpProtocol: "tcp"
            FromPort: "22"
            ToPort: "22"
            CidrIp: "77.91.248.0/21"
          -
            IpProtocol: "tcp"
            FromPort: "9000"
            ToPort: "9000"
            CidrIp: "77.91.248.0/21"
          -
            IpProtocol: "tcp"
            FromPort: "9000"
            ToPort: "9000"
            SourceSecurityGroupId:
              Ref: "LoadBalancerSecurityGroup"
